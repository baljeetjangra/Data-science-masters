Q1. What are the characteristics of the tuples? Is tuple immutable?
Ans- Tuples are ordered, meaning that their elements are stored in a specific order. Tuples are immutable, meaning that once created, their elements cannot be changed, deleted or added.


Q2. What are the two tuple methods in python? Give an example of each method. Give a reason why tuples have only two in-built methods as compared to Lists.
Ans- 
1. count(): This method returns the number of times a specified element appears in a tuple.
2. index(): This method returns the index of the first occurrence of a specified element in a tuple.
Tuples have only two in-built methods as compared to lists because tuples are designed to be simple, efficient, and unchanging data structures, whereas lists are designed to be more flexible and mutable.


Q3. Which collection data types in python do not allow duplicate items? Write a code using a set to remove duplicates from the given list.
List = [1, 1, 1, 2, 1, 3, 1, 4, 2, 1, 2, 2, 2, 3, 2, 4, 3, 1, 3, 2, 3, 3, 3, 4, 4, 1, 4, 2, 4, 3, 4, 4]
Ans- Sets are collections data types in python that do not allow duplicate items
List = [1, 1, 1, 2, 1, 3, 1, 4, 2, 1, 2, 2, 2, 3, 2, 4, 3, 1, 3, 2, 3, 3, 3, 4, 4, 1, 4, 2, 4, 3, 4, 4]
new_list = list(set(List))
print(new_list)


Q4. Explain the difference between the union() and update() methods for a set. Give an example of each method.
Ans- 
1. The union() method returns the union of two sets, meaning all unique items from both sets. 
2. The update() method updates the set by adding elements from another set or iterable.


Example of union():


set1 = {1, 2, 3}
set2 = {2, 3, 4}
set3 = set1.union(set2)
print(set3) # prints {1, 2, 3, 4}


Example of update():


set1 = {1, 2, 3}
set2 = {2, 3, 4}
set1.update(set2)
print(set1) # prints {1, 2, 3, 4}


Q5. What is a dictionary? Give an example. Also, state whether a dictionary is ordered or unordered.
Ans- A dictionary is a collection of key-value pairs, where each key maps to a specific value. Dictionaries are unordered, meaning that their elements are not stored in a specific order.
Example: dict1 = {'key1': 'value1', 'key2': 'value2'}


Q6. Can we create a nested dictionary? If so, please give an example by creating a simple one-level nested dictionary.
Ans- Yes, a nested dictionary can be created by creating a dictionary within a dictionary. Here's a simple one-level nested dictionary:
nested_dict = {'dict1': {'key1': 'value1', 'key2': 'value2'}}


Q7. Using setdefault() method, create key named topics in the given dictionary and also add the value of the key as this list ['Python', 'Machine Learning’, 'Deep Learning'] 
dict1 = {'language' : 'Python', 'course': 'Data Science Masters'}
Ans- Here's an example of using the setdefault() method to create a key named 'topics' in the given dictionary 


dict1 = {'language' : 'Python', 'course': 'Data Science Masters'}
dict1.setdefault('topics', ['Python', 'Machine Learning', 'Deep Learning'])
print(dict1) # prints {'language' : 'Python', 'course': 'Data Science Masters', 'topics': ['Python', 'Machine Learning', 'Deep Learning']}


Q8. What are the three view objects in dictionaries? Use the three in-built methods in python to display these three view objects for the given dictionary.
dict1 = {'Sport': 'Cricket' , 'Teams': ['India', 'Australia', 'England', 'South Africa', 'Sri Lanka', 'New Zealand']}
Ans- 
1. keys(): This method returns a view object that displays a list of all the keys in the dictionary
2. values(): This method returns a view object that displays a list of all